<%
  authorized_roles = roles_allowed_to_view_private_notes_from_role_or_function(@project)

  if Redmine::Plugin.installed?(:redmine_limited_visibility)
    user_roles = user_functions(@project, authorized_roles, User.current)
    checked_roles = @journal.present? ? @journal.functions : default_checked_functions(@project, authorized_roles, User.current, @issue)
    selectable_roles = selectable_functions(@project, authorized_roles)
    functions_allowed_by_private_notes_groups = PrivateNotesGroup.where(group_id: user_roles.map(&:id)).map(&:function)
    selectable_roles = selectable_roles & (functions_allowed_by_private_notes_groups | checked_roles) if functions_allowed_by_private_notes_groups.present?
  else
    user_roles = user_roles(@project, authorized_roles, User.current)
    checked_roles = @journal.present? ? @journal.roles : default_checked_roles(@project, authorized_roles, User.current, @issue)
    selectable_roles = selectable_roles(@project, authorized_roles)
  end

  selectable_roles = selectable_roles | checked_roles | user_roles
%>

<div class="visibility" style="margin-bottom: 0.2em;">
  <em class="info"><%= l(:text_info_comment_visibility) %></em>

  <% selectable_roles.each do |role| %>
    <% involved = "involved" if checked_roles.include?(role) %>
    <% disabled = "disabled" if involved.present? && checked_roles.size == 1 %>
    <% css_classes = "#{involved} #{disabled} " %>
    <%= render "issue_comments/visibility_role", :function => role, styles: css_classes %>
  <% end %>
</div>
<%= hidden_field_tag "journal[visibility]", checked_roles.map(&:id).join('|'), id: "journal_visibility", data: { id:  @journal.present? ? @journal.id : 0  } %>
